service: MagicMirror

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-stack-output

custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: 'non-linux'
  output:
    # handler: out.handler  # function handler (data, serverless, options) {console.log('Received Stack Output', data)}} module.exports = { handler }}
    file: stack.json

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: eu-west-1
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"

functions:
  app:
    handler: wsgi.handler
    events:
      # - http: ANY /
      # - http: 'ANY {proxy+}'
      - http:
          path: /
          method: ANY
          authorizer:
            identitySource: "method.request.header.Authorization"
            arn: arn:aws:cognito-idp:eu-west-1:834819762693:userpool/eu-west-1_PtJ4NoVML  # TODO when fix available!!! or multi stack :(
              # https://github.com/serverless/serverless/issues/2240#issuecomment-268411199
              # https://forum.serverless.com/t/cognito-user-identity-pools-as-serverless-yml-resource-defs/2050/9
              # https://github.com/serverless/serverless/issues/3212#issuecomment-307341924
              # https://github.com/serverless/serverless/issues/3212#issuecomment-307341924
            # providerArn:
              # Fn::GetAtt:
              #   - UserPool
              #   - Arn
            type: "COGNITO_USER_POOLS"

resources:
  Resources:


    # # Create a IAM role for accessing SES to send confirmation emails
    # SESRole:
    #   Type: "AWS::IAM::Role"
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Version: "2008-10-17"
    #       Statement:
    #         - Effect: "Allow"
    #           Principal:
    #             Service:
    #               - "cognito-idp.amazonaws.com"
    #           Action:
    #             - "sts:AssumeRole"
    #     Policies:
    #       - PolicyName: "CognitoSESPolicy"
    #         PolicyDocument:
    #           Version: "2008-10-17"
    #           Statement:
    #             - Effect: "Allow"
    #               Action:
    #                 - "ses:SendEmail"
    #                 - "ses:SendRawEmail"
    #               Resource: "arn:aws:ses:eu-west-1:834819762693:identity/magicmirror.gavin.ie"

    # Creates a user pool
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${{self:service}}UserPool
        # AliasAttributes:
        #   - email
        # AutoVerifiedAttributes:
        #   - email

        # EmailConfiguration:
        #   ReplyToEmailAddress: do-not-reply@magicmirror.gavin.ie
        #   SourceArn:
        #     Fn::GetAtt: [SESRole, Arn]
        EmailVerificationSubject: "Magic Mirror verification code"
        EmailVerificationMessage: "Please click the link below to verify your email address. {####} "
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          # - Name: email
          #   AttributeDataType: String
          #   Mutable: false
          #   Required: true
        DeviceConfiguration:
          DeviceOnlyRememberedOnUserPrompt: true
        Policies:
          PasswordPolicy:
            RequireLowercase: true
            RequireUppercase: true
            RequireSymbols: false
            RequireNumbers: true
            MinimumLength: 8

    # Creates a User Pool Client to be used by the identity pool
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${{self:service}}UserPoolClient
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool

    # Creates a federeated Identity pool
    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${{self:service}}IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolClient
            ProviderName:
              'Fn::GetAtt': [ UserPool, ProviderName ]
        # SupportedLoginProviders:
        #   'graph.facebook.com': "xxxxxxxxxx"
        # OpenIdConnectProviderARNs:
        #   - 'arn:aws:iam::xxxxxxxxxxx:oidc-provider/accounts.google.com'

    # # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
    # CognitoUnAuthorizedRole:
    #   Type: "AWS::IAM::Role"
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: "Allow"
    #           Principal:
    #             Federated: "cognito-identity.amazonaws.com"
    #           Action:
    #             - "sts:AssumeRoleWithWebIdentity"
    #           Condition:
    #             StringEquals:
    #               "cognito-identity.amazonaws.com:aud":
    #                 Ref: IdentityPool
    #             "ForAnyValue:StringLike":
    #               "cognito-identity.amazonaws.com:amr": unauthenticated
    #     Policies:
    #       - PolicyName: "CognitoUnauthorizedPolicy"
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: "Allow"
    #               Action:
    #                 - "mobileanalytics:PutEvents"
    #                 - "cognito-sync:*"
    #               Resource: "*"

    # Create a role for authorized access to AWS resources. Control what your user can access. This example only allows Lambda invokation
    # Only allows users in the previously created Identity Pool
    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                # - Effect: "Allow"  # TODO temp
                #   Action:
                #     - "rekognition:CompareFaces"
                #     - "rekognition:CreateCollection"
                #     - "rekognition:DeleteCollection"
                #     - "rekognition:DeleteFaces"
                #     - "rekognition:DetectFaces"
                #     - "rekognition:DetectLabels"
                #     - "rekognition:IndexFaces"
                #     - "rekognition:ListCollections"
                #     - "rekognition:ListFaces"
                #     - "rekognition:SearchFaces"
                #     - "rekognition:SearchFacesByImage"
                #   Resource: "*"  # arn:aws:rekognition:region:account-id:collection/collection-id
                - Effect: "Allow"
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:dynamodb:"
                        - Ref: AWS::Region
                        - ":"
                        - Ref: AWS::AccountId
                        - ":table/"
                        - Ref: UserDynamoDBTable
                  Condition:
                    "ForAllValues:StringEquals":
                      "dynamodb:LeadingKeys":
                        "${cognito-identity.amazonaws.com:sub}"
                # - Effect: "Allow"
                #   Action:
                #     - "lambda:InvokeFunction"
                #   Resource: "*"

    # Assigns the roles to the Identity Pool
    IdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
              'Fn::GetAtt': [ CognitoAuthorizedRole, Arn ]
          # unauthenticated:
          #     'Fn::GetAtt': [ CognitoUnAuthorizedRole, Arn ]

    UserDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${{self:service}}-${{self:provider.stage}}-users
        AttributeDefinitions:
          - AttributeName: userid
            AttributeType: S
        KeySchema:
          - AttributeName: userid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  Outputs:
    # UserPoolArn:
    #   Value:
    #     Fn::GetAtt: [ UserPool, Arn ]
    #   Export:
    #     Name: "UserPool::Arn"
    UserPoolId:
      Value:
        Ref: UserPool
      Export:
        Name: "UserPool::Id"
    UserPoolClientId:
      Value:
        Ref: UserPoolClient
      Export:
        Name: "UserPoolClient::Id"
    IdentityPoolId:
      Value:
        Ref: IdentityPool
      Export:
        Name: "IdentityPool::Id"


# resources:
#   Resources:
#     uploadBucket:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: ${{self:service}}-${{self:provider.stage}}-uploads
#
#     userTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${{self:service}}-${{self:provider.stage}}-users
#         AttributeDefinitions:
#           - AttributeName: userId
#             AttributeType: S
#         KeySchema:
#           - AttributeName: userId
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
