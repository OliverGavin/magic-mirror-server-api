service: MagicMirror

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-stack-output
  - serverless-export-env

package:
  exclude:
    - node_modules/**
    - package.json
    - package-lock.json
    - stack.json
    - tests/**
    - requirements.txt
    - run.py

custom:
  variables:
    cognito:
      developerProviderName: 'login.magicmirror.gavin.ie'
    dynamodb:
      usersTableName:
       ${{self:service}}-${{self:provider.stage}}-users
      deviceGroupTableName:
       ${{self:service}}-${{self:provider.stage}}-device-group
      deviceGroupUsersTableName:
       ${{self:service}}-${{self:provider.stage}}-device-group-users
      deviceGroupUserFacesTableName:
       ${{self:service}}-${{self:provider.stage}}-device-group-user-faces
      deviceGroupUsersIntegrationsTableName:
       ${{self:service}}-${{self:provider.stage}}-device-group-user-integrations
      integrationsTableName:
       ${{self:service}}-${{self:provider.stage}}-integrations
  wsgi:
    app: app.app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: 'non-linux'
  output:
    file: stack.json

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: eu-west-1
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
  environment:
    USER_POOL_ID:
      Ref: UserPool
    IDENTITY_POOL_ID:
      Ref: IdentityPool
    DEVELOPER_PROVIDER_NAME:
      ${{self:custom.variables.cognito.developerProviderName}}
    USERS_TABLE:
      ${{self:custom.variables.dynamodb.usersTableName}}
    DEVICE_GROUP_TABLE:
      ${{self:custom.variables.dynamodb.deviceGroupTableName}}
    DEVICE_GROUP_USERS_TABLE:
      ${{self:custom.variables.dynamodb.deviceGroupUsersTableName}}
    DEVICE_GROUP_USER_FACES_TABLE:
      ${{self:custom.variables.dynamodb.deviceGroupUserFacesTableName}}
    DEVICE_GROUP_USERS_INTEGRATIONS_TABLE:
     ${{self:service}}-${{self:provider.stage}}-device-group-user-integrations
    INTEGRATIONS_TABLE:
     ${{self:service}}-${{self:provider.stage}}-integrations
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:BatchGetItem
       - dynamodb:PutItem
       - dynamodb:BatchWriteItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt:
          - DeviceGroupTable
          - Arn
        - Fn::GetAtt:
          - DeviceGroupUsersTable
          - Arn
        - Fn::Join:
          - ""
          - - Fn::GetAtt:
              - DeviceGroupUsersTable
              - Arn
            - "/index/*"
        - Fn::GetAtt:
          - DeviceGroupUserFacesTable
          - Arn
        - Fn::Join:
          - ""
          - - Fn::GetAtt:
              - DeviceGroupUserFacesTable
              - Arn
            - "/index/*"
    - Effect: "Allow"
      Action:
        - rekognition:CreateCollection
        - rekognition:DeleteCollection
        - rekognition:IndexFaces
        - rekognition:SearchFacesByImage
        - rekognition:DeleteFaces

      Resource: "*"
    - Effect: "Allow"
      Action:
        - cognito-identity:GetOpenIdTokenForDeveloperIdentity
      Resource: "*"


functions:
  # Sample integrations
  weather:
    handler: third_party.weather.weather_handler
  # news:
  #   handler: todo
  # stock:
  #   handler: todo
  # fitbit:
  #   handler: todo
  # timetable:
  #   handler: todo
  # clock:
  #   handler: todo

  # The service itself
  app:
    handler: wsgi.handler
    events:
      - http:
          path: '{proxy+}'
          method: ANY
          cors:
            origins: '*'
            headers:
              - Content-Type
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amz-Date
            allowCredentials: false
          authorizer:
            identitySource: "method.request.header.Authorization"
            type: aws_iam
            # identitySource: "method.request.header.Authorization"
            # arn: arn:aws:cognito-idp:eu-west-1:834819762693:userpool/eu-west-1_PtJ4NoVML  # TODO when fix available!!! or multi stack :(
            #   # https://github.com/serverless/serverless/issues/2240#issuecomment-268411199
            #   # https://forum.serverless.com/t/cognito-user-identity-pools-as-serverless-yml-resource-defs/2050/9
            #   # https://github.com/serverless/serverless/issues/3212#issuecomment-307341924
            #   # https://github.com/serverless/serverless/issues/3212#issuecomment-307341924

      - http:
          path: '/'
          method: ANY
          cors:
            origins: '*'
            headers:
              - Content-Type
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amz-Date
            allowCredentials: false
          authorizer:
            identitySource: "method.request.header.Authorization"
            arn: arn:aws:cognito-idp:eu-west-1:834819762693:userpool/eu-west-1_PtJ4NoVML
            type: "COGNITO_USER_POOLS"

resources:
  Resources:

    # Creates a user pool
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${{self:service}}UserPool

        EmailVerificationSubject: "Magic Mirror verification code"
        EmailVerificationMessage: "Please click the link below to verify your email address. {####} "
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true

        DeviceConfiguration:
          DeviceOnlyRememberedOnUserPrompt: true
        Policies:
          PasswordPolicy:
            RequireLowercase: true
            RequireUppercase: true
            RequireSymbols: false
            RequireNumbers: true
            MinimumLength: 8

    # Creates a User Pool Client to be used by the identity pool
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${{self:service}}UserPoolClient
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool

    # Creates a federeated Identity pool
    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${{self:service}}IdentityPool
        AllowUnauthenticatedIdentities: false
        DeveloperProviderName: ${{self:custom.variables.cognito.developerProviderName}}
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolClient
            ProviderName:
              'Fn::GetAtt': [ UserPool, ProviderName ]
        SupportedLoginProviders:
          'graph.facebook.com': "1634271429961880"
        OpenIdConnectProviderARNs:
          - arn:aws:iam::834819762693:oidc-provider/accounts.google.com

    # Create a role for authorized access to AWS resources. Control what your user can access. This example only allows Lambda invokation
    # Only allows users in the previously created Identity Pool
    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "apigateway:*"
                    - "execute-api:Invoke"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "polly:SynthesizeSpeech"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                  Resource:
                    Fn::GetAtt:
                      - UsersTable
                      - Arn
                  Condition:
                    "ForAllValues:StringEquals":
                      "dynamodb:LeadingKeys":
                        "${cognito-identity.amazonaws.com:sub}"
                # - Effect: "Allow"
                #   Action:
                #     - "lambda:InvokeFunction"
                #   Resource: "*"

    # Assigns the roles to the Identity Pool
    IdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
              'Fn::GetAtt': [ CognitoAuthorizedRole, Arn ]

    UsersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${{self:custom.variables.dynamodb.usersTableName}}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    DeviceGroupTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${{self:custom.variables.dynamodb.deviceGroupTableName}}
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          # groupName
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    DeviceGroupUsersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${{self:custom.variables.dynamodb.deviceGroupUsersTableName}}
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          # groupOwner
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
        - IndexName: useridGSI
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: userId
              KeyType: "HASH"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    DeviceGroupUserFacesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${{self:custom.variables.dynamodb.deviceGroupUserFacesTableName}}
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: faceId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: faceId
            KeyType: RANGE
        GlobalSecondaryIndexes:
        - IndexName: groupIdUserIdGSI
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: groupId
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    DeviceGroupUsersIntegrationsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${{self:custom.variables.dynamodb.deviceGroupUsersIntegrationsTableName}}
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          # integrationsid, position, size, params
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    IntegrationsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${{self:custom.variables.dynamodb.integrationsTableName}}
        AttributeDefinitions:
          - AttributeName: integrationId
            AttributeType: S
          # functionName, name
        KeySchema:
          - AttributeName: integrationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


  Outputs:
    UserPoolId:
      Value:
        Ref: UserPool
      Export:
        Name: "UserPool::Id"
    UserPoolClientId:
      Value:
        Ref: UserPoolClient
      Export:
        Name: "UserPoolClient::Id"
    IdentityPoolId:
      Value:
        Ref: IdentityPool
      Export:
        Name: "IdentityPool::Id"
